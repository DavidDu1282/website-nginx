worker_processes auto;

events {
    worker_connections 1024;
}

http {
    include /etc/nginx/mime.types;
    default_type application/octet-stream;

    sendfile on;
    keepalive_timeout 65;
    gzip on;

    # Server block to allow Let's Encrypt challenge requests over HTTP
    server {
        listen 80;
        server_name hao123.ddns.net;

        location /.well-known/acme-challenge/ {
            root /var/www/letsencrypt;
            allow all;
        }

        # Redirect everything else to HTTPS once SSL is ready
        location / {
            return 301 https://$host$request_uri;
        }
    }

    server {
        listen 443 ssl;
        server_name hao123.ddns.net;

        # # Check if Let's Encrypt cert exists, otherwise use self-signed
        ssl_certificate /etc/letsencrypt/live/hao123.ddns.net/fullchain.pem;
        ssl_certificate_key /etc/letsencrypt/live/hao123.ddns.net/privkey.pem;

        # # Fallback to self-signed cert if Let's Encrypt files are missing
        # ssl_certificate /etc/ssl/certs/selfsigned.crt;
        # ssl_certificate_key /etc/ssl/private/selfsigned.key;

        # SSL Security Settings
        ssl_protocols TLSv1.2 TLSv1.3;
        ssl_prefer_server_ciphers on;
        ssl_ciphers HIGH:!aNULL:!MD5;

        # Serve Frontend from Mounted Folder
        root /usr/share/nginx/html;
        index index.html;

        # Ensure frontend routes work (e.g., /login, /dashboard)
        location / {
            try_files $uri /index.html;
        }

        # Allow Let's Encrypt challenge requests over HTTPS
        location /.well-known/acme-challenge/ {
            root /var/www/letsencrypt;
            allow all;
        }

        # Cache static assets for better performance
        location ~* \.(?:ico|css|js|gif|jpe?g|png|woff2?|eot|ttf|svg|webp)$ {
            expires 6M;
            access_log off;
            add_header Cache-Control "public";
        }

        # Proxy API requests to backend
        location /api/ {
            proxy_pass http://backend:8000;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_set_header Content-Type $http_content_type;

            # Timeout settings
            proxy_connect_timeout 60s;
            proxy_send_timeout 60s;
            proxy_read_timeout 60s;

            # Handle CORS (for preflight OPTIONS requests)
            if ($request_method = OPTIONS) {
                add_header Access-Control-Allow-Origin "*";
                add_header Access-Control-Allow-Methods "GET, POST, OPTIONS, PUT, DELETE";
                add_header Access-Control-Allow-Headers "Authorization, Content-Type";
                return 204;
            }
        }
    }
}

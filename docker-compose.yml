# initial certificate acquisition
# services:
#   nginx:
#     image: nginx:latest
#     container_name: nginx
#     restart: always
#     ports:
#       - "80:80"
#       - "443:443"
#     volumes:
#       - ./nginx_initial.conf:/etc/nginx/nginx.conf:ro # Use a temporary config!
#       - letsencrypt-webroot:/var/www/letsencrypt
#       - letsencrypt-certs:/etc/letsencrypt
#       - /etc/ssl/certs/selfsigned.crt:/etc/ssl/certs/selfsigned.crt:ro
#       - /etc/ssl/private/selfsigned.key:/etc/ssl/private/selfsigned.key:ro
#       - /home/ubuntu/fortune-telling-website:/usr/share/nginx/html:ro
#     networks:
#       - frontend_network
#       - backend_network

#   certbot:
#     image: certbot/certbot
#     container_name: certbot
#     volumes:
#       - letsencrypt-webroot:/var/www/letsencrypt
#       - letsencrypt-certs:/etc/letsencrypt
#     command: certonly --webroot --webroot-path=/var/www/letsencrypt --email moderatelyburnedpotato@gmail.com --agree-tos --no-eff-email -d hao123.ddns.net
#     depends_on:
#       - nginx

# networks:
#   frontend_network:
#     external: true
#   backend_network:
#     external: true

# volumes:
#   letsencrypt-webroot:
#   letsencrypt-certs:

# After certificate acquisition, switch to the final configuration
# services:
#   nginx:
#     image: nginx:latest
#     container_name: nginx
#     restart: always
#     ports:
#       - "80:80"
#       - "443:443"
#     volumes:
#       - ./nginx.conf:/etc/nginx/nginx.conf:ro  # Back to your original config!
#       - letsencrypt-webroot:/var/www/letsencrypt
#       - letsencrypt-certs:/etc/letsencrypt
#       - /etc/ssl/certs/selfsigned.crt:/etc/ssl/certs/selfsigned.crt:ro  # Keep for fallback
#       - /etc/ssl/private/selfsigned.key:/etc/ssl/private/selfsigned.key:ro # Keep for fallback
#       - /home/ubuntu/fortune-telling-website:/usr/share/nginx/html:ro
#     networks:
#       - frontend_network
#       - backend_network

#   certbot:
#     image: certbot/certbot
#     container_name: certbot
#     volumes:
#       - letsencrypt-webroot:/var/www/letsencrypt
#       - letsencrypt-certs:/etc/letsencrypt
#     command: certonly --webroot --webroot-path=/var/www/letsencrypt --email your-email@example.com --agree-tos --no-eff-email -d hao123.ddns.net
#       #removed depends_on

# networks:
#   frontend_network:
#     external: true
#   backend_network:
#     external: true

# volumes:
#   letsencrypt-webroot:
#   letsencrypt-certs:


services:
  nginx:
    image: nginx:latest
    container_name: nginx
    restart: always
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - letsencrypt-webroot:/var/www/letsencrypt
      - letsencrypt-certs:/etc/letsencrypt
      - /etc/ssl/certs/selfsigned.crt:/etc/ssl/certs/selfsigned.crt:ro # Keep for fallback
      - /etc/ssl/private/selfsigned.key:/etc/ssl/private/selfsigned.key:ro # Keep for fallback
      - /home/ubuntu/fortune-telling-website:/usr/share/nginx/html:ro  # use relative path for simplicity
    networks:
      - frontend_network
      - backend_network

  certbot:
    image: certbot/certbot
    container_name: certbot
    restart: unless-stopped # VERY IMPORTANT
    volumes:
      - letsencrypt-webroot:/var/www/letsencrypt
      - letsencrypt-certs:/etc/letsencrypt
    command: >-
      sh -c "certbot certonly --webroot --webroot-path=/var/www/letsencrypt \
        --email moderatelyburnedpotato@gmail.com --agree-tos --no-eff-email \
        -d hao123.ddns.net --non-interactive && \
        while true; do \
          certbot renew --webroot --webroot-path=/var/www/letsencrypt \
            --deploy-hook 'nginx -s reload' --quiet && \
          sleep 12h; \
        done"
    networks:   #certbot needs network access to talk to letsencrypt
      - frontend_network

networks:
  frontend_network:
    external: true
  backend_network:
    external: true

volumes:
  letsencrypt-webroot:
  letsencrypt-certs: